#!/usr/bin/env python

"""Update Authorized Keys Files
                                                                                 
Publishes SSH keys to remote servers and rebuilds their authorized keys files.

Usage:                                                                           
    authkeys [options]

Options:
    -u <hosts>, --update <hosts>  servers to update
    -s <hosts>, --skip <hosts>    servers to skip

Servers are specified with a comma separated list (no spaces).

Run this script from kundert and assure that browse, magenta, and kaskowitz are
all up and running, and each of the four machines is also running tor/vidalia.
""" 
#    -k <keys>, --keys <keys>      keys to update
#    Cannot use --keys because it results in incomplete authorized_keys files
#    (they contain only the one key).

# Imports {{{1
from __future__ import print_function
from docopt import docopt
from scripts import join, fopen, script_prefs, Run, ScriptError
from textwrap import dedent
import tempfile
import sys

# Globals {{{1
script_prefs(exit_upon_error=False, expanduser=True)
ConfigFile = './config'
KeyDir = '/mnt/home/.ssh/keys'
AuthorizedKeysPreamble = dedent('''\
    # This file is automatically generated by Ken's sshkeys program.
    # Do not modify this file directly (any modifications will be lost).
    # Instead, ask Ken to add your changes to the sshkeys config file.
''')

# Initialize {{{1
cmdline = docopt(__doc__)
#keys = cmdline['--keys'].split(',') if cmdline['--keys'] else []
keys = False
update = cmdline['--update'].split(',') if cmdline['--update'] else []
skip = cmdline['--skip'].split(',') if cmdline['--skip'] else []
authorizedKeys = {}

# Read config file
try:
    with fopen(ConfigFile) as f:
        contents = f.read()
except ScriptError as err:
    sys.exit(str(err))
code = compile(contents, ConfigFile, 'exec')
config = {}
exec(code, config)

# Process keys {{{1
for key, data in config['Keys'].items():
    if keys and key not in keys:
        continue
    purpose = data.get('purpose')
    servers = data.get('servers')
    privkey =  join(KeyDir, key)
    pubkey =  privkey + '.pub'

    try:
        with fopen(pubkey) as f:
            contents = f.read()
    except ScriptError as err:
        print('%s, skipping.' % err)
        continue

    try:
        fingerprint = Run(['ssh-keygen', '-l', '-f', pubkey], 'wOeW').stdout
        fingerprint = fingerprint.strip()
    except ScriptError as err:
        print(str(err))

    for server in sorted(servers):
        if update and server not in update:
            continue
        if server in skip:
            continue
        description = None
        restrictions = None
        send = 'authorized-keys'
        try:
            server_data = servers[server]
            send = server_data.get('send', send)
            description = server_data.get('description')
            restrictions = server_data.get('restrictions')
        except TypeError:
            pass

        if type(send) is not list:
            send = [send]
        if set(send) - set(['private-key', 'authorized-keys']):
            print('Invalid value for send in %s.%s' % (key, server))

        if 'private-key' in send:
            try:
                print('Sending %s private key to %s.' % (key, server))
                stdin = [
                    'put %s .ssh' % (privkey),
                    'put %s .ssh' % (pubkey),
                ]
                Run(['sftp', '-q', server], stdin='\n'.join(stdin), modes='sOeW')
            except ScriptError as err:
                print(str(err))
            except KeyboardInterrupt:
                print('Continuing')
        if 'authorized-keys' in send:
            if restrictions:
                restrictions = ','.join(restrictions)

            lines = [
                '# %s' % t for t in [purpose, description, fingerprint] if t
            ]
            if restrictions:
                lines.append(restrictions + ' ' + contents.strip())
            else:
                lines.append(contents.strip())

            commented_public_key = '\n'.join(lines) + '\n'
            if server in authorizedKeys:
                authorizedKeys[server].append(commented_public_key)
            else:
                authorizedKeys[server] = [commented_public_key]

# Update servers {{{1
for server in sorted(authorizedKeys):
    contents = [AuthorizedKeysPreamble] + authorizedKeys[server]
    print('Updating %s ...' % server)
    try:
        with tempfile.NamedTemporaryFile(mode='w+t') as tmpfile:
            tmpfile.write('\n'.join(contents))
            tmpfile.flush()
            stdin = 'put %s .ssh/authorized_keys' % (tmpfile.name)
            Run(['sftp', '-q', server], stdin=stdin, modes='sOeW')
    except ScriptError as err:
        print(str(err))
    except KeyboardInterrupt:
        print('Continuing')
